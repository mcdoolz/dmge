<?php

/**
 * @file
 * File for the Cloudinary SDK module.
 */

/**
 * Required minimum version number of "CLOUDINARY SDK for PHP".
 */
define('CLOUDINARY_SDK_MINIMUM_VERSION', '1.9.0');

/**
 * Flag for dealing with "CLOUDINARY SDK for PHP" not loaded.
 */
define('CLOUDINARY_SDK_NOT_LOADED', 0);

/**
 * Flag for dealing with "CLOUDINARY SDK for PHP" old version.
 */
define('CLOUDINARY_SDK_OLD_VERSION', 1);

/**
 * Flag for dealing with "CLOUDINARY SDK for PHP" loaded.
 */
define('CLOUDINARY_SDK_LOADED', 2);

/**
 * Implements hook_libraries_info().
 */
function cloudinary_sdk_libraries_info() {
  return array(
    'cloudinary' => array(
      'name' => 'Cloudinary SDK for PHP',
      'vendor url' => 'http://cloudinary.com/',
      'download url' => 'https://github.com/cloudinary/cloudinary_php',
      'path' => 'src',
      'version arguments' => array(
        'file' => 'src/Cloudinary.php',
        'pattern' => '/const VERSION = "(.*)";/',
        'lines' => 20,
      ),
      'files' => array(
        'php' => array(
          'Cloudinary.php',
          'Uploader.php',
          'Api.php',
          'Api/Error.php',
          'Api/AlreadyExists.php',
          'Api/AuthorizationRequired.php',
          'Api/BadRequest.php',
          'Api/GeneralError.php',
          'Api/NotAllowed.php',
          'Api/NotFound.php',
          'Api/RateLimited.php',
          'Api/Response.php',
        ),
      ),
      'callbacks' => array(
        // Initialize cloudinary sdk after the library is loaded.
        'post-load' => array(
          'cloudinary_sdk_callback',
        ),
      ),
    ),
  );
}

/**
 * Initialize cloudinary sdk after the library is loaded.
 */
function cloudinary_sdk_callback(&$library, $version = NULL, $variant = NULL) {
  $initialized = &drupal_static(__FUNCTION__, FALSE);

  if ($initialized !== TRUE) {
    $initialized = cloudinary_sdk_init();
  }

  return $initialized;
}

/**
 * Cloudinary configuration initialization.
 */
function cloudinary_sdk_init($config = array()) {
  if (empty($config)) {
    $config = cloudinary_sdk_config_load();
  }

  if (!empty($config)) {
    \Cloudinary::config($config);
    return TRUE;
  }

  return FALSE;
}

/**
 * Load the cloudinary api settings from variables.
 *
 * @return array
 *   API configuration of cloudinary.
 */
function cloudinary_sdk_config_load() {
  $config = array();

  $cloud_name = variable_get('cloudinary_sdk_cloud_name', '');
  $api_key = variable_get('cloudinary_sdk_api_key', '');
  $api_secret = variable_get('cloudinary_sdk_api_secret', '');

  if ($cloud_name && $api_key && $api_secret) {
    $config = array(
      'cloud_name' => $cloud_name,
      'api_key' => $api_key,
      'api_secret' => $api_secret,
    );
  }

  // HACKING CORE!  CALL THE DRUPAL POLICE!
  $config = module_invoke_all('cloudinary_config_alter', $config);

  return $config;
}

/**
 * The status of "CLOUDINARY SDK for PHP".
 */
function cloudinary_sdk_check($ver = FALSE) {
  $info = libraries_load('cloudinary');
  $status = $version = '';
  $error_message = '';

  if (!$info['loaded']) {
    $status = CLOUDINARY_SDK_NOT_LOADED;
    $error_message = ($info['error message']) ? $info['error message'] : '';
  }
  elseif ($info['version'] && version_compare($info['version'], CLOUDINARY_SDK_MINIMUM_VERSION) < 0) {
    $status = CLOUDINARY_SDK_OLD_VERSION;
    $version = $info['version'];
  }
  else {
    $status = CLOUDINARY_SDK_LOADED;
    $version = $info['version'];
  }

  return $ver ? array($status, $version, $error_message) : $status;
}

/**
 * Implements hook_help().
 */
function cloudinary_sdk_help($path, $arg) {
  $logo = l(theme('image', array(
    'path' => drupal_get_path('module', 'cloudinary_sdk') . '/images/logo.png',
    'alt' => 'Cloudinary Logo',
    'width' => '172',
    'height' => '38',
  )), 'https://cloudinary.com', array('html' => TRUE));

  $api = l(theme('image', array(
    'path' => drupal_get_path('module', 'cloudinary_sdk') . '/images/api.png',
    'alt' => 'API account',
    'width' => '600',
    'height' => '249',
  )), 'https://cloudinary.com/console', array('html' => TRUE));

  $output = '';

  switch ($path) {
    case 'admin/help#cloudinary_sdk':
      $output .= '<p>' . $logo . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t("Image upload - Securely upload images or any other file, at any scale from any source. API for fast upload directly from your user's browsers or mobile apps.") . '</li>';
      $output .= '<li>' . t('Cloud storage - Store as many images as needed. Our image hosting service stores images privately and safely with automatic backup and historical revisions.') . '</li>';
      $output .= '<li>' . t('Powerful administration - Manage your media library interactively with our Digital Asset Management solution or via APIs. Gain insights using advanced analytics.') . '</li>';
      $output .= '<li>' . t('Image manipulation - Manipulate your images dynamically to fit any graphics design. Apply effects, resizing, cropping, face detection, watermarks and tons of image processing capabilities.') . '</li>';
      $output .= '<li>' . t("Fast delivery - Get your images delivered lightning-fast, responsive and highly optimized for any device in any location. Images are served via Akamai's worldwide CDN.") . '</li>';
      $output .= '</ul>';
      break;

    case 'admin/config/media/cloudinary':
      $output .= '<p>' . $logo . '</p>';
      $output .= '<h3>' . t('API account') . '</h3>';
      $output .= '<p>' . t('You can get the correct cloud name, API key and API secret on your account page.') . '</p>';
      $output .= '<p>' . $api . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function cloudinary_sdk_menu() {
  $items = array();

  $items['admin/config/media/cloudinary'] = array(
    'title' => 'Cloudinary',
    'description' => 'Configure Cloudinary API account and settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloudinary_sdk_settings'),
    'access arguments' => array('administer cloudinary'),
    'file' => 'cloudinary_sdk.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cloudinary_sdk_permission() {
  return array(
    'administer cloudinary' => array(
      'title' => t('Administer cloudinary and cloudinary settings'),
    ),
  );
}
