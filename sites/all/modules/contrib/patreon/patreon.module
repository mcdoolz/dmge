<?php
/**
 * @file
 * Drupal integration with Patreon.
 */

if (file_exists(DRUPAL_ROOT . '/sites/all/libraries/patreon/src/patreon.php')) {
  include_once DRUPAL_ROOT . '/sites/all/libraries/patreon/src/patreon.php';
}

define('PATREON_URL', 'https://www.patreon.com');
define('PATREON_DOWNLOAD_URL', 'https://github.com/Patreon/patreon-php/archive/0.3.1.tar.gz');
define('PATREON_LIBRARY', 'patreon');
define('PATREON_OAUTH_CALLBACK_URL', 'patreon/oauth');
define('PATREON_REGISTER_OAUTH_URL', 'https://www.patreon.com/platform/documentation/clients');

use Drupal\patreon\PatreonBridge;
use Drupal\patreon\PatreonMissingTokenException;
use Drupal\patreon\PatreonGeneralException;
use Drupal\patreon\PatreonUnauthorizedException;
use Patreon\API;
use Patreon\OAuth;

include_once drupal_get_path('module', 'patreon') . '/src/Drupal/patreon/PatreonGeneralException.php';
include_once drupal_get_path('module', 'patreon') . '/src/Drupal/patreon/PatreonMissingTokenException.php';
include_once drupal_get_path('module', 'patreon') . '/src/Drupal/patreon/PatreonUnauthorizedException.php';

/**
 * Implements hook_help().
 */
function patreon_help($path, $arg) {
  switch ($path) {
    case 'admin/help#patreon':
      return t('<p>Patreon is a module to connect to the <a href="@patreon_url">Patreon</a> service using <a href="@patreon_download_url">their API</a>.</p>', array(
        '@patreon_url' => PATREON_URL,
        '@patreon_download_url' => PATREON_DOWNLOAD_URL,
      ));
  }
}

/**
 * Implements hook_menu().
 */
function patreon_menu() {
  $items[PATREON_OAUTH_CALLBACK_URL] = array(
    'title' => 'Patreon OAuth',
    // Allow all requests to this URL so that OAuth may work correctly.
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('patreon_oauth_callback'),
    'access arguments' => array('administer patreon'),
    'type' => MENU_CALLBACK,
    'file' => 'patreon.pages.inc',
  );

  $items['admin/config/services/patreon'] = array(
    'title' => 'Patreon',
    'description' => 'Patreon Oauth key and secret.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('patreon_admin_form'),
    'access arguments' => array('administer patreon'),
    'file' => 'patreon.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function patreon_permission() {
  return array(
    'administer patreon' => array(
      'title' => t('Administer Patreon configuration'),
    ),
  );
}

/**
 * Helper to load the Patreon API Oauth object.
 *
 * @return null|\Patreon\OAuth
 *   A valid Oauth object, or NULL on failure.
 *
 * @throws \Drupal\patreon\PatreonGeneralException
 * @throws \Drupal\patreon\PatreonMissingTokenException
 */
function patreon_get_oauth() {
  $return = NULL;
  $key = variable_get('patreon_client_id', '');
  $secret = variable_get('patreon_client_secret', '');

  if ($key && $secret) {
    $return = new OAuth($key, $secret);
  }
  else {
    throw new PatreonMissingTokenException('Client ID or Client Secret not set.');
  }

  return $return;
}

/**
 * Helper to load the Patreon Bridge object.
 *
 * @return \Drupal\patreon\PatreonBridge|null
 *   A valid PatreonBridge object or NULL on failure.
 */
function patreon_get_bridge() {
  $oauth = NULL;
  $return = NULL;

  try {
    $oauth = patreon_get_oauth();
  }
  catch (PatreonMissingTokenException $e) {
    $message = t('The site has failed to load the Patreon client with the error :error. Please ensure you have a valid API Key and Secret entered at <a href="/admin/config/services/patreon">/admin/config/services/patreon</a>.', array(
      ':error' => $e->getMessage(),
    ));

    drupal_set_message($message);
    watchdog('patreon', $message, array(), WATCHDOG_ERROR);
  }
  catch (PatreonGeneralException $e) {
    $message = t('The site has failed to load the Patreon client with the error :error.', array(
      ':error' => $e->getMessage(),
    ));

    drupal_set_message($message);
    watchdog('patreon', $message, array(), WATCHDOG_ERROR);
  }

  if ($oauth) {
    include_once drupal_get_path('module', 'patreon') . '/src/Drupal/patreon/PatreonBridge.php';

    try {
      $return = new PatreonBridge($oauth, PATREON_URL);
    }
    catch (Exception $e) {
      $message = t('The site has failed to load the Patreon client with the error :error.', array(
        ':error' => $e->getMessage(),
      ));

      drupal_set_message($message);
      watchdog('patreon', $message, array(), WATCHDOG_ERROR);
    }
  }

  return $return;
}

/**
 * Helper to return the site's oauth callback url.
 *
 * @return string
 *   The absolute URL of the Oauth callback url.
 */
function patreon_get_callback_url() {
  return url('/' . PATREON_OAUTH_CALLBACK_URL, array('absolute' => TRUE));
}

/**
 * Returns an array of valid callback redirect URLs.
 *
 * @return array
 *   Array of valid URLs. Alterable by hook.
 */
function patreon_get_allowed_callback_urls() {
  $allowed = array(
    0 => patreon_get_callback_url(),
  );

  // Allow other modules to define allowed callbacks.
  drupal_alter('patreon_allowed_callbacks', $allowed);

  return $allowed;
}

/**
 * Redirect a user to authorise access to their Patreon account.
 *
 * @param string $client_id
 *   The client idea of the Patreon creator.
 * @param string $redirect_url
 *   The callback URL for Patreon to redirect to.
 * @param bool $redirect
 *   If TRUE, redirects the user to the generated URL. If not, returns URL.
 *
 * @return string|bool
 *   Returns the generated URL if $redirect set to FALSE, else FALSE on error.
 *
 * @see patreon_get_allowed_callback_urls()
 */
function patreon_authorise_account($client_id, $redirect_url = NULL, $redirect = TRUE) {
  $valid = FALSE;
  if ($redirect_url == NULL) {
    $redirect_url = patreon_get_callback_url();
    $valid = TRUE;
  }
  elseif (in_array($redirect_url, patreon_get_allowed_callback_urls())) {
    $valid = TRUE;
  }

  if ($valid) {
    if ($bridge = patreon_get_bridge()) {
      $url = $bridge->getAuthoriseUrl($client_id, $redirect_url);

      if ($redirect) {
        drupal_goto($url);
      }
      else {
        return $url;
      }
    }
  }
  else {
    watchdog('patreon', 'Attempt to redirect user to URL not in allowed callbacks', array(), WATCHDOG_WARNING);
  }

  return FALSE;
}

/**
 * Helper to return tokens from the API.
 *
 * @param string $code
 *   An oauth code returned by the Patreon API.
 * @param string $url
 *   The callback URL to use. If not valid, will be rejected.
 *
 * @return null|array
 *   An access tokens, or NULL in event of error.
 *
 * @see patreon_get_allowed_callback_urls()
 *
 * @throws \Drupal\patreon\PatreonGeneralException
 * @throws \Drupal\patreon\PatreonUnauthorizedException
 */
function patreon_get_tokens($code, $url = NULL) {
  $tokens = NULL;
  $url = (is_null($url) || !in_array($url, patreon_get_allowed_callback_urls())) ? patreon_get_callback_url() : $url;

  if ($bridge = patreon_get_bridge()) {

    try {
      $tokens = $bridge->tokensFromCode($code, $url);
    }
    catch (PatreonUnauthorizedException $e) {
      throw new PatreonUnauthorizedException($e->getMessage());
    }
    catch (\Exception $e) {
      throw new PatreonGeneralException($e->getMessage());
    }
  }

  return $tokens;
}

/**
 * Helper to return an access token from an Oauth code.
 *
 * @param string $code
 *   An oauth code returned by the Patreon API.
 * @param string $url
 *   The callback URL to use. If not valid, will be rejected.
 *
 * @return null|string
 *   A valid access token, or NULL in event of error.
 *
 * @throws \Drupal\patreon\PatreonGeneralException
 * @throws \Drupal\patreon\PatreonUnauthorizedException
 *
 * @depreciated
 */
function patreon_get_token($code, $url = NULL) {
  watchdog('patreon', 'Depreciated function patreon_get_token used. Please update your code to use patreon_get_tokens', array(), WATCHDOG_WARNING);
  $tokens = $return = NULL;

  try {
    $tokens = patreon_get_tokens($code, $url);
  }
  catch (PatreonUnauthorizedException $e) {
    throw new PatreonUnauthorizedException($e->getMessage());
  }
  catch (\Exception $e) {
    throw new PatreonGeneralException($e->getMessage());
  }

  if ($tokens && isset($tokens['access_token'])) {
    $return = $tokens['access_token'];
  }

  return $return;
}

/**
 * Helper to check for a valid response from the Patreon API.
 *
 * @param array $response
 *   A Patreon API response array.
 *
 * @return bool
 *   Whether the response triggered an error or not.
 *
 * @depreciated
 */
function patreon_check_response($response) {
  watchdog('patreon', 'Depreciated function patreon_check_response() used. Please remove this from your code.');

  return TRUE;
}

/**
 * @param Drupal\patreon\PatreonBridge $bridge
 *   A PatreonBridge object with the access and refresh tokens set.
 * @param string $function
 *   The API function to call.
 * @param string $callback
 *   A valid Oaith callback URL in case a refresh of access tokens is attempted.
 * @param array $parameters
 *   An array of parameters for the fetch_page_of_pledges function.
 *
 * @return null|\Art4\JsonApiClient\Document
 *   The API return, or NULL on error.
 */
function patreon_api_fetch(Drupal\patreon\PatreonBridge $bridge, $function, $callback, $parameters = array()) {
  $return = NULL;

  try {
    $client = new API($bridge->getToken());
    $return = $bridge->apiFetch($client, $function, $parameters);
  }
  catch (PatreonMissingTokenException $e) {
    $message = t('The site has failed to load the Patreon client with the error :error. Please ensure you have a valid API Key and Secret entered at <a href="/admin/config/services/patreon">/admin/config/services/patreon</a>.', array(
      ':error' => $e->getMessage(),
    ));

    drupal_set_message($message);
    watchdog('patreon', $message, array(), WATCHDOG_ERROR);
  }
  catch (PatreonUnauthorizedException $e) {
    if (!$bridge->refreshTried) {
      try {
        $refresh_token = $bridge->getRefreshToken();
        $bridge->refreshTried = TRUE;
        $new_tokens = $bridge->getRefreshedTokens($refresh_token, $callback);

        if ($new_tokens) {
          foreach (['access', 'refresh'] as $token_name) {
            if (array_key_exists($token_name . '_token', $new_tokens)) {
              variable_set('patreon_' . $token_name . '_token', $new_tokens[$token_name . '_token']);
              if ($token_name == 'access') {
                $bridge->setToken($new_tokens[$token_name . '_token']);
              }
              else {
                $bridge->setRefreshToken($new_tokens[$token_name . '_token']);
              }
            }
          }
          // Retry the function callback.
          $return = patreon_api_fetch($bridge, $function, $callback, $parameters);
        }
      }
      catch (PatreonUnauthorizedException $error) {
        $message = t('The site has failed to load the Patreon client with the error :error. Your API token has expired or not been set. Please ensure you have a valid API Key and Secret entered at <a href="/admin/config/services/patreon">/admin/config/services/patreon</a>.', array(
          ':error' => $e->getMessage(),
        ));

        drupal_set_message($message);
        watchdog('patreon', $message, array(), WATCHDOG_ERROR);
      }
      catch (\Exception $error) {
        $message = t('The site has failed to load the Patreon client with the error :error.', array(
          ':error' => $e->getMessage(),
        ));

        drupal_set_message($message);
        watchdog('patreon', $message, array(), WATCHDOG_ERROR);
      }
    }
    else {
      $message = t('The site has failed to load the Patreon client. Your API token has expired or not been set. Please ensure you have a valid API Key and Secret entered at <a href="/admin/config/services/patreon">/admin/config/services/patreon</a>.');

      drupal_set_message($message);
      watchdog('patreon', $message, array(), WATCHDOG_ERROR);
    }

  }
  catch (PatreonGeneralException $e) {
    $message = t('The site has failed to load the Patreon client with the error :error.', array(
      ':error' => $e->getMessage(),
    ));

    drupal_set_message($message);
    watchdog('patreon', $message, array(), WATCHDOG_ERROR);
  }

  return $return;
}

/**
 * Helper to return user data from the Patreon API.
 *
 * @param null|string $token
 *   A valid API access token for a single user.
 * @param null|string $refresh_token
 *   A valid API refresh token for a single user.
 * @param string $callback
 *   A valid callback URL for Oauth in case the code needs to attempt a refresh.
 *
 * @return null|\Art4\JsonApiClient\Document
 *   An array of data from the Patreon API, or NULL on error.
 */
function patreon_fetch_user($token = NULL, $refresh_token = NULL, $callback = NULL) {
  $return = NULL;

  if (!isset($token)) {
    $token = variable_get('patreon_access_token', NULL);
  }
  if (!isset($refresh_token)) {
    $refresh_token = variable_get('patreon_refresh_token', NULL);
  }
  if (!isset($callback)) {
    $callback = patreon_get_callback_url();
  }

  if ($bridge = patreon_get_bridge()) {
    $bridge->setToken($token);
    $bridge->setRefreshToken($refresh_token);

    $return = patreon_api_fetch($bridge, 'fetch_user', $callback);
  }

  return $return;
}

/**
 * Helper to return campaign data from the Patreon API.
 *
 * @param null|string $token
 *   A valid API access token for a single user.
 * @param null|string $refresh_token
 *   A valid API refresh token for a single user.
 * @param string $callback
 *   A valid callback URL for Oauth in case the code needs to attempt a refresh.
 *
 * @return null|\Art4\JsonApiClient\Document
 *   An array of data from the Patreon API, or NULL on error.
 */
function patreon_fetch_campaign($token = NULL, $refresh_token = NULL, $callback = NULL) {
  $return = NULL;

  if (!isset($token)) {
    $token = variable_get('patreon_access_token', NULL);
  }
  if (!isset($refresh_token)) {
    $refresh_token = variable_get('patreon_refresh_token', NULL);
  }
  if (!isset($callback)) {
    $callback = patreon_get_callback_url();
  }

  if ($bridge = patreon_get_bridge()) {
    $bridge->setToken($token);
    $bridge->setRefreshToken($refresh_token);

    $return = patreon_api_fetch($bridge, 'fetch_campaign', $callback);
  }

  return $return;
}

/**
 * Helper to return campaign and patron data from the Patreon API.
 *
 * @param null|string $token
 *   A valid API access token for a single user.
 *
 * @return null
 *   Returns null.
 *
 * @depreciated
 */
function patreon_fetch_campaign_and_patrons($token = NULL) {
  watchdog('patreon', 'Depreciated function patreon_fetch_campaign_and_patrons() used. Pleasure update your code.');

  return NULL;
}

/**
 * Fetch a paged list of pledge data from the Patreon API.
 *
 * @param int $campaign_id
 *   A valid Patreon campaign id.
 * @param int $page_size
 *   The number of items per page.
 * @param null|string $cursor
 *   A cursor chracter.
 * @param null|string $token
 *   A valid Patreon API token for a user.
 * @param null|string $refresh_token
 *   A valid API refresh token for a single user. *
 * @param string $callback
 *   A valid callback URL for Oauth in case the code needs to attempt a refresh.
 *
 * @return null|\Art4\JsonApiClient\Document
 *   An array of data from the Patreon API, or NULL on error.
 */
function patreon_fetch_page_of_pledges($campaign_id, $page_size, $cursor = NULL, $token = NULL, $refresh_token = NULL, $callback = NULL) {
  $return = NULL;

  if (!isset($token)) {
    $token = variable_get('patreon_access_token', NULL);
  }
  if (!isset($refresh_token)) {
    $refresh_token = variable_get('patreon_refresh_token', NULL);
  }
  if (!isset($callback)) {
    $callback = patreon_get_callback_url();
  }

  if ($bridge = patreon_get_bridge()) {
    $bridge->setToken($token);
    $bridge->setRefreshToken($refresh_token);

    $return = patreon_api_fetch($bridge, 'fetch_page_of_pledges', $callback, array(
      $campaign_id,
      $page_size,
      $cursor,
    ));
  }

  return $return;
}

/**
 * Helper to check if a Patreon user is a patron of the client.
 *
 * @param \Art4\JsonApiClient\Document $patreon_account
 *   Results from patreon_fetch_user().
 *
 * @return bool
 *   TRUE is user's pledges match creator id. Defaults to FALSE.
 */
function patreon_is_patron($patreon_account) {
  $return = FALSE;

  if ($creator_id = variable_get('patreon_creator_id', NULL)) {
    if ($bridge = patreon_get_bridge()) {
      $bridge->setToken($token = variable_get('patreon_access_token', NULL));
      $return = $bridge->isPatron($patreon_account, $creator_id);
    }
  }

  return $return;
}

/**
 * Helper to recurse an array of API results for a specific key.
 *
 * @param array $haystack
 *   The results returned by a valid API call.
 * @param string $needle
 *   A specific key in the results to search for.
 *
 * @return mixed
 *   The value of the key in the array. FALSE if not found.
 *
 * @deprecated
 */
function patreon_get_value_by_key(array $haystack, $needle) {
  watchdog('patreon', 'Depreciated function patreon_get_value_by_key() used. Please update your code.', array(), WATCHDOG_ALERT);
  $found = FALSE;
  $iterator = new RecursiveArrayIterator($haystack);
  $return = patreon_iterator_search($iterator, $needle, $found);
  return $return;
}

/**
 * Helper to recurse through a RecursiveArrayIterator for a value.
 *
 * @param \RecursiveArrayIterator $iterator
 *   A valid RecursiveArrayIterator.
 * @param string $needle
 *   A key to search the array for.
 * @param bool $found
 *   Whether value has been found.
 *
 * @return mixed
 *   The value of the key in the array. NULL if not found.
 *
 * @depreciated
 */
function patreon_iterator_search(RecursiveArrayIterator $iterator, $needle, &$found) {
  watchdog('patreon', 'Depreciated function patreon_iterator_search() used. Please update your code.', array(), WATCHDOG_ALERT);
  $return = NULL;
  while ($iterator->valid() && !$found) {
    if ($iterator->key() == $needle) {
      $return = $iterator->current();
      $found = TRUE;
    }
    elseif ($iterator->hasChildren()) {
      $return = patreon_iterator_search($iterator->getChildren(), $needle, $found);
    }

    $iterator->next();
  }

  return $return;
}
