<?php

/**
 * @file
 * The DMGE behind the scenes systems.
 */

/**
 * Invokes hook_cron().
 */
function dmge_system_cron() {
  // Adds respective patreon roles to patrons.
  // dmge_system_make_patrons();
}

/**
 * Return the unserialized list of patreon roles.
 */
function dmge_system_get_patreon_roles() {
  $patreon_roles = variable_get('dmge_system_patreon_roles', array(100 => 'patron'));
  if (!is_array($patreon_roles)) {
    $patreon_roles = unserialize($patreon_roles);
  }
  return $patreon_roles;
}

/**
 * Scrubs all patreon roles from all user accounts.
 */
function dmge_system_clear_patreon_roles() {
  $users = array_keys(entity_load('user'));
  $patreon_roles = dmge_system_get_patreon_roles();
  if (empty($patreon_roles)) {
    watchdog('DMGE Patreon', 'No user roles to assign.');
    return;
  }
  foreach ($patreon_roles as $key => $value) {
    $role = user_role_load($value['role']);
    user_multiple_role_edit($users, 'remove_role', $role->rid);
  }
}

/**
 * Gets users, checks pledges via API, assigns roles.
 */
function dmge_system_make_patrons() {
  // If we don't have what we need, bail out.
  if (!module_exists('patreon') || !function_exists('patreon_fetch_user')) {
    drupal_set_message(t('Need the patreon user module installed and enabled.'), 'error');
    return;
  }

  // Load all users.
  $users = entity_load('user');

  // Cycle and filter out non Patreon users.
  foreach ($users as $key => $user) {
    if (empty($user->field_user_patreon_token)) {
      unset($users[$key]);
    }
  }
  print count($users);
  foreach ($users as $key => $user) {
    if (empty($user->field_user_patreon_token)) {
      $token = $user->field_user_patreon_token->value();
      $api_client = _dmge_system_patreon_api_client($token);
      $user = $api_client->fetch_user();
      print_r($user);
    }
  }
  return;

  // Get an array of all the campaigns supporters and their PIDs.
  $pids = array();
  $patrons = array();
  // $token = variable_get('patreon_access_token', NULL);
  $token = $user->field_user_patreon_token;
  $api_client = _dmge_system_patreon_api_client($token);
  $campaign = $api_client->fetch_campaign()['data'][0];
  $campaign_id = $campaign['id'];

  $response = $api_client->fetch_campaign_and_patrons();
  print_r($response);
  return;

  $patrons = array();
  // loop over the pledges to get e.g. their amount and user name
  foreach ($response as $patron) {
    $pledge_data = $pledges_response->get('data')->get($pledge_data_key);
    $pledge_amount = $pledge_data->attribute('amount_cents');
    $patron = $pledge_data->relationship('patron')->resolve($pledges_response);
    var_dump($patron);
    // $patron_email = $patron->attribute('email');
    // if (!empty($patron['attributes']['email'])) {
    //   $patrons[] = $patron;
    // }
  }
  // print_r($patrons);
  return;

  // if ($campaign = patreon_fetch_campaign_and_patrons(variable_get('patreon_access_token', NULL))) {
  //   $campaign = array_shift($campaign);
  //   // Get up to 500 patrons at once.
  //   // TODO: Make this check for paging.
  //   $pledges = patreon_fetch_page_of_pledges($campaign['id'], 500);
  //   foreach ($pledges as $key => $value) {
  //     // For legibility.  $pid is assigned here as key in patrons array.
  //     $pid = $value['relationships']['patron']['data']['id'];
  //     $patrons[$pid] = $value['attributes']['amount_cents'];
  //   }
  //   $pids = array_keys($patrons);
  // }

  if (!empty($patrons)) {
    foreach($patrons as $patron => $pledge) {
      // print $patron . "\n" . $pledge . "\n\n";
    }
  }

  // Get array of patreon roles and pledge amounts.
  $patreon_roles = dmge_system_get_patreon_roles();
  if (empty($patreon_roles)) {
    watchdog('DMGE Patreon', 'No user roles to assign.');
    return;
  }

  // Clear the slate before assigning roles.
  dmge_system_clear_patreon_roles();

  // We have our users and our patreon roles.  Let's get to work.
  foreach ($users as $key => $user) {
    $user_wrapper = entity_metadata_wrapper('user', $user);
    // Get this users PID.
    $pid = $user_wrapper->field_user_patreon_id->value();
    // If the users PID is in the list of PIDS, then we have a Patron.
    $roles_to_assign = array();
    if (in_array($pid, $pids)) {
      foreach ($patreon_roles as $key => $role) {
        if ($role['pledge'] <= $patrons[$pid]) {
          $roles_to_assign[$role['role']] = user_role_load($role['role']);
        }
      }
    }
    if (!empty($roles_to_assign)) {
      // Clears all patreon roles before readding them.
      foreach ($roles_to_assign as $rid => $role) {
        // Add the role.
        user_multiple_role_edit(array($user->uid), 'add_role', $rid);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function dmge_system_permission() {
  return array(
    'access dmge' => array(
      'title' => t('Access the DMGE'),
      'description' => t('Use the DMGE.'),
      'restrict access' => TRUE,
    ),
    'configure dmge' => array(
      'title' => t('Configure the DMGE'),
      'description' => t('Administrate the DMGE.'),
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * Themes the main system window.
 */
function dmge_system_theme() {
  global $user;
  return array(
    'dmge_system_main' => array(
      'variables' => array(
        'roles' => $user->roles,
      ),
      'template' => 'templates/dmge_system_main',
    ),
    'dmge_system_players' => array(
      'variables' => array(
      ),
      'template' => 'templates/dmge_system_players',
    ),
  );
}

/**
 * The Players window generation.
 */
function dmge_system_players() {
  global $user;
  $path = drupal_get_path('module', 'dmge_system');
  drupal_add_js($path . '/engine/player.js', array(
    'type' => 'file',
    'scope' => 'footer',
    'weight' => 999,
  ));
  $css_files = array(
    $path . '/css/players.css',
  );
  $ext_css_files = array(
    // 'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css',
    // 'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css'
  );
  foreach($ext_css_files as $ext_css_file) {
    drupal_add_css($ext_css_file, array(
      'type' => 'external',
      'weight' => 999,
    ));
  }
  foreach($css_files as $css_file) {
    drupal_add_css($css_file, array(
      'type' => 'file',
      'weight' => 999,
    ));
  }
  return theme('dmge_system_players', array());
}

/**
 * The Main DMGE window generation.
 */
function dmge_system_main() {
  global $user;
  if (!user_access('access dmge')) {
    drupal_set_message(t('You have to log in.'));
    return drupal_goto('user');
  }
  $path = drupal_get_path('module', 'dmge_system');

  $default_campaign = variable_get('dmge_default_campaign', 'undefined');

  drupal_add_js(array(
    'dmge_system' => array(
      'basepath' => $path,
      'default_campaign' => $default_campaign,
    )
  ), 'setting');

  $cloudinary = libraries_load('cloudinary');
  if (empty($cloudinary['loaded'])) {
    drupal_set_message(t('Cloudinary SDK PHP didn\'t load.', 'error'));
    return;
  }

  $header_javascripts = array(
    $path . '/lib/jsgrid.min.js',
    $path . '/lib/fabric.min.js',
    $path . '/lib/js.cookie.js',
    $path . '/lib/svg.min.js',
    $path . '/lib/particles.min.js',
    $path . '/lib/dropzone.js',
  );
  foreach ($header_javascripts as $header_javascript) {
    drupal_add_js($header_javascript, array(
      'type' => 'file',
      'scope' => 'header',
      'weight' => 999,
    ));
  }
  drupal_add_js('https://code.jquery.com/ui/1.12.1/jquery-ui.min.js', array(
    'type' => 'external',
    'scope' => 'header',
    'weight' => 999,
  ));

  $footer_javascripts = array(
    $path . '/engine/init.js',
    $path . '/engine/dmge.js',
  );
  foreach ($footer_javascripts as $footer_javascript) {
    drupal_add_js($footer_javascript, array(
      'type' => 'file',
      'scope' => 'footer',
      'weight' => 999,
    ));
  }

  $css_files = array(
    $path . '/css/jsgrid.min.css',
    $path . '/css/jsgrid-theme.min.css',
    $path . '/css/jquery-ui.structure.min.css',
    $path . '/css/font-awesome-animation.min.css',
    $path . '/css/screen.css',
  );
  $ext_css_files = array(
    // 'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css',
    'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css'
  );
  foreach($ext_css_files as $ext_css_file) {
    drupal_add_css($ext_css_file, array(
      'type' => 'external',
      'weight' => 999,
    ));
  }
  foreach($css_files as $css_file) {
    drupal_add_css($css_file, array(
      'type' => 'file',
      'weight' => 999,
    ));
  }
  return theme('dmge_system_main', array('roles' => $user->roles));
}

/**
 * Implements hook_menu().
 */
function dmge_system_menu() {
  $items['engine/gif2mp4'] = array(
  // Accepts only GIFs and returns the access URL as an MP4 for instant embedding.
    'title' => 'DMGE',
    'description' => 'GIF 2 MP4.',
    'page callback' => 'dmge_system_gif_to_mp4_process',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access dmge'),
  );
  // Cloudinary submissions
  $items['engine/cloudinary/upload'] = array(
    'title' => 'DMGE',
    'description' => 'Upload',
    'page callback' => 'dmge_system_cloudinary_upload',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access dmge'),
  );
  // Cloudinary catalogue
  $items['engine/cloudinary/catalogue'] = array(
    'title' => 'DMGE',
    'description' => 'Catalogue',
    'page callback' => 'dmge_system_cloudinary_catalogue',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access dmge'),
  );
  // Engine
  $items['engine'] = array(
    'title' => 'DMGE',
    'description' => 'The Dynamic Maps Game Engine.',
    'page callback' => 'dmge_system_main',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access dmge'),
  );
  // Player view
  $items['engine/players'] = array(
    'title' => 'DMGE Player View',
    'description' => 'The Dynamic Maps Game Engine.',
    'page callback' => 'dmge_system_players',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  // Module settings.
  $items['admin/config/administration/dmge_system'] = array(
    'title' => 'DMGE',
    'description' => 'Adjust DMGE settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dmge_system_theme_settings'),
    'access arguments' => array('configure dmge'),
  );
  $items['engine/youtube'] = array(
    'title' => 'Ajax callback for YouTube URLs.',
    'page callback' => '_dmge_system_get_youtube_url',
    'access arguments' => array('access dmge'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * I have no settings.
 */
function dmge_system_theme_settings($form = array()) {
  $form['sidebar']['dmge_sidebar_about'] = array(
    '#type' => 'textarea',
    '#title' => 'About Text',
  );
  $form['map']['map_settings']['dmge_default_campaign'] = array(
    '#type' => 'textfield',
    '#title' => 'Default Campaign Name',
  );
  $form['save_load']['dmge_save_load_local_storage'] = array(
    '#type' => 'boolean',
    '#title' => 'Use Browser Local Storage?',
  );
  return system_settings_form($form);
}

/**
 * In case we need a redirect in code.
 */
function dmge_system_engine($form = array()) {
  $form['markup']['#markup'] = "Hello world.";
  return $form;
}

/**
 * Returns true if link is a patreon link.
 */
function _dmge_is_patreon_link($url) {
  if (strpos($url, 'patreon') !== FALSE) {
    return TRUE;
  }
}

/**
 * Helper rewrites url for patreon provider.
 */
function _dmge_rewrite_url($url) {
  if (_dmge_is_patreon_link($url)) {
    $url = parse_url($url);
    $matches = array();
    preg_match('/h=(\d+)/', $url['query'], $matches);
    if (!empty($matches)) {
      $url = 'https://www.patreon.com/posts/' . $matches[1];
    }
  }
  return $url;
}

/**
 * Alter ALL the forms!
 */
function dmge_system_form_user_login_block_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}
function dmge_system_form_user_login_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}
function dmge_system_form_user_register_form_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}
function dmge_system_form_passwordless_login_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}

/**
 * Alter the log in form with Patreon user account links.
 */
function _dmge_system_login_form_alter(&$form, &$form_state = NULL) {
  $patreon_link = '';
  if (module_exists('dmge_patreon')) {
    if (user_is_anonymous()) {
      $client_id = variable_get('dmge_patreon_client_id', NULL);
      $title = t('Log on via Patreon');
      $patreon_link = t('<a href="@url" id="user-login-patreon"><i class="fab fa-patreon">&nbsp;</i> @title</a>', array(
        '@url' => dmge_patreon_authorise_account(),
        '@title' => $title,
      ));
    }
  }
  if (!empty($patreon_link)) {
    $form['links']['#markup'] = '<div class="item-list"><ul><li class="first">' . $patreon_link . '</li><li class="last"><a href="/user/password" title="Request new password via e-mail." class="password-reset-link"><i class="fas fa-unlock-alt">&nbsp;</i> Request new password</a></li></ul></div>';
  }
}

/**
 * Alter search button to use magnifying glass glyph.
 */
function dmge_system_form_library_resources_block_form_alter(&$form, $form_state) {
  $form['keys']['#attributes']['placeholder'][] = t('Search');
  $form['actions']['submit']['#value'] = html_entity_decode('&#xf002;');
}

/**
 * Implements hook_rest_server_execute_errors_alter().
 * This was done for using the REST API.
 * It is not necessary but causes no harm.
 */
function dmge_system_rest_server_execute_errors_alter(&$error_alter_array, $controller, $arguments) {
  if ($error_alter_array['code'] === 401) {
    $error_alter_array['code'] = 400;
    // $error_alter_array['header_message'] = 'No love.';
    // $error_alter_array['body_data'] = 'Bad username or password.';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function dmge_system_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'dmge_system');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Helper to get YouTube URL.
 */
function _dmge_system_get_youtube_url($id = '') {
  $id = filter_xss($id);
  $id = check_plain($id);
  if (!empty($_GET)) {
    if (!empty($_GET['v'])){
      $id = $_GET['v'];
    }
  }
  if (empty($id)) {
    return 'No id provided.';
  }

  $url = 'https://www.youtube.com/watch?v=' . $id;
  $contents = file_get_contents($url);
  $pos = stripos($contents, 'var ytInitialPlayerResponse = ');
  if ($pos !== FALSE) {
    $contents = substr($contents, $pos, strlen($contents));
    $endpos = stripos($contents, '</script>');
    $contents = substr($contents, 0, $endpos);
    $contents = trim($contents, ';</script>, var ytInitialPlayerResponse = ');
  }
  $data = json_decode($contents);
  $thumbnails = $data->videoDetails->thumbnail->thumbnails;
  $video['thumbnail'] = $thumbnails[array_key_last($thumbnails)]->url;
  $formats = $data->streamingData->formats;
  $video['url'] = $formats[array_key_last($formats)]->url;
  $video['title'] = $data->videoDetails->title;

  // $best = 0;
  // Get the largest resolution of the bunch.
  // foreach($info->streamingData->formats as $key => $format) {
  //   if ($format->width > $best) {
  //     $best = $format->width;
  //     $video['url'] = $format->url;
  //   }
  // }

  drupal_json_output($video);
}

/**
 * Invokes hook_form_FORMID_alter().
 */
function dmge_system_form_patreon_admin_form_alter(&$form, &$form_state) {
  if (!empty($form_state['values'])) {
    $roles = $form_state['values']['dmge_system_patreon_roles'];
  }
  else {
    $user_roles = user_roles();
    $roles = serialize(array(
      array('pledge' => '500', 'role' => 2),
      array('pledge' => '100', 'role' => 1)
    ));
    $roles = variable_get('dmge_system_patreon_roles', $roles);
    if (!is_array($roles)) {
      $roles = unserialize($roles);
    }
    $roles = array_filter($roles, '_dmge_system_roles_empty');
  }
  $form['dmge_system_patreon_roles'] = array(
    '#tree' => TRUE,
    '#title' => 'Set Patreon Roles',
    '#type' => 'fieldset',
    '#prefix' => '<div id="patreon_roles">',
    '#suffix' => '</div>',
  );
  $form['dmge_system_patreon_roles']['introduction'] = array(
    '#markup' => t('Pledge amounts must be written as an integer.  Eg: 100 is a dollar.'),
    '#weight' => -10,
  );

  for ($i = 0; $i !== (count($roles) + 1); $i++) {
    $user_roles = user_roles();
    $form['dmge_system_patreon_roles'][] = array(
      'pledge' => array(
        '#title' => 'Pledge amount',
        '#type' => 'textfield',
        '#default_value' => (!empty($roles[$i])) ? check_plain($roles[$i]['pledge']) : '',
      ),
      'role' => array(
        '#size' => 3,
        '#title' => t('Assigns Role'),
        '#delta' => 10,
        '#multiple' => FALSE,
        '#type' => 'select',
        '#options' => user_roles(),
        '#default_value' => (!empty($roles[$i])) ? $roles[$i]['role'] : 0,
      ),
    );
  }

  $form['dmge_system_add_patreon_roles'] = array(
    '#type' => 'button',
    '#value' => t('Add a Patreon level'),
    '#href' => '',
    '#ajax' => array(
      'callback' => 'dmge_system_patreon_roles_ajax_add_patreon_roles',
      'wrapper' => 'patreon_roles',
    ),
  );

  $form['#submit'][] = 'dmge_system_patreon_roles_configure_form_submit';

  return $form;

}

/**
 * Helper returns the patreon roles for the form.
 */
function dmge_system_patreon_roles_ajax_add_patreon_roles($form, &$form_state) {
  return $form['dmge_system_patreon_roles'];
}

/**
 * Helper sorts array by sub array value.
 */
function _sort_by_amount($a, $b) {
  return $a['pledge'] - $b['pledge'];
}

/**
 * Helper checks if the pledge field is empty.
 */
function _dmge_system_roles_empty($var) {
  return !empty($var['pledge']);
}

/**
 * Invokes form_submit().
 */
function dmge_system_patreon_roles_configure_form_submit($form, $form_state) {
  form_state_values_clean($form_state);
  $values = $form_state['values'];
  $roles = $form_state['values']['dmge_system_patreon_roles'];
  $roles = array_filter($values['dmge_system_patreon_roles'], '_dmge_system_roles_empty');
  usort($roles, '_sort_by_amount');
  $roles = serialize($roles);
  variable_set('dmge_system_patreon_roles', $roles);
  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Helper to submit files to cloudinary and get response.
 */
function dmge_system_gif_to_mp4() {
  $form = drupal_get_form('dmge_system_gif_to_mp4_form');
  return $form;
}

/**
 * Helper rearrays files.
 * Code lifted from http://php.net/manual/en/features.file-upload.multiple.php
 */
function reArrayFiles(&$file_post) {
  $file_array = array();
  $file_count = count($file_post['name']);
  $file_keys = array_keys($file_post);
  // Cycle files and add them to a new array.
  for ($i=0; $i<$file_count; $i++) {
    foreach ($file_keys as $key) {
      $file_array[$i][$key] = $file_post[$key][$i];
    }
  }
  return $file_array;
}

/**
 * Returns the form elements and loads the library for cloudinary.
 */
function dmge_system_gif_to_mp4_form($form = array(), $form_state = array()) {
  $form = array('#attributes' => array('enctype' => 'multipart/form-data'));
  $form['upload'] = array(
    '#name' => 'dmge_gif2mp4[]',
    '#type' => 'file',
    '#title' => t('Select some .gif files to convert to .mp4'),
    '#title_display' => 'visible',
    '#size' => 22,
    '#attributes' => array('multiple' => 'multiple'),
    '#theme_wrappers' => array(),
    '#weight' => -10,
    '#upload_validators'  => array(
      'file_validate_extensions' => array('gif'),
    ),
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#weight' => 10,
  );
  return $form;
}

/**
 * On submission of form, upload, track and retrieve converted data.
 */
function dmge_system_gif_to_mp4_form_submit(&$form, &$form_state) {
  if (!user_access('access dmge')) {
    drupal_access_denied();
    return FALSE;
  }
  $files = reArrayFiles($_FILES['dmge_gif2mp4']);
  foreach ($files as $key => $file) {
    if ($file['type'] !== 'image/gif') {
      unset($files[$key]);
    }
  }
  $file = reset($files);
  if (empty($file['name'])) {
    drupal_set_message(t('No GIFs selected?'), 'error');
    return;
  }
  // We've cleaned up the files list to include only gifs, now we'll upload.
  // If we get a good response, we're good to go.
  if ($files = dmge_system_gif_to_mp4_process($files)) {
    return $files;
  }
}

/**
 * Helper uploads gifs and returns URLs.
 */
function dmge_system_gif_to_mp4_process($files = array()) {
  if (!user_access('access dmge')) {
    drupal_access_denied();
    return FALSE;
  }

  if (!empty($_FILES)) {
    $files = $_FILES;
  }

  $cloudinary = libraries_load('cloudinary');
  if (empty($cloudinary['loaded'])) {
    drupal_set_message(t('Cloudinary SDK PHP didn\'t load.', 'error'));
    return;
  }

  $uploaded = array();
  foreach ($files as $key => $file) {
    if (!empty($file['tmp_name'])) {
      $upload = \Cloudinary\Uploader::upload($file['tmp_name'], array("use_filename" => TRUE));
    }
    else {
      drupal_set_message(t('Couldn\'t find the file.'), 'error');
      return;
    }

    if (!empty($upload) && !empty($upload['secure_url'])) {
      $uploaded[] = $upload;
    }
    if (!empty($upload['error'])) {
      drupal_set_message(t('Cloudinary says..<br><pre>' . $upload['error'] . '</pre>'));
    }
  }
  foreach ($uploaded as &$file) {
    $ext = 'mp4';
    $info = pathinfo($file['secure_url']);
    $file = $info['dirname'] . '/' . $info['filename'] . '.' . $ext;
  }
  if (!empty($uploaded)) {
    return drupal_json_output($uploaded);
  }
  else {
    return FALSE;
  }
}

/**
 * Hook into the Cloudinary SDK API and alter the config with user values, if they exist.
 */
function dmge_system_cloudinary_config_alter($config) {
  global $user;
  if ($user->uid) {
    $wrapper = entity_metadata_wrapper('user', $user);
    $cloud_name = $wrapper->field_cloudinary_cloudname->value();
    $api_key = $wrapper->field_cloudinary_apikey->value();
    $api_secret = $wrapper->field_cloudinary_apisecret->value();
    // If we have all three elements filled in, let's replace the login data.
    if (!empty($cloud_name) &&
    !empty($api_secret) &&
    !empty($api_key)) {
      $config = array(
        'cloud_name' => $cloud_name,
        'api_secret' => $api_secret,
        'api_key' => $api_key,
      );
    }
  }
  return $config;
}

function test_yt($id = NULL) {
    if (empty($id)) {
      $id = 'T5mVe46KMRA';
    }
    // $url = 'https://www.youtube.com/get_video_info?video_id=' . $id . '&eurl=https%3A%2F%2Fyoutube.googleapis.com%2Fv%2Fonz2k4zoLjQ&html5=1&c=TVHTML5&cver=6.20180913';
    $url = 'https://www.youtube.com/watch?v=' . $id;
    $contents = file_get_contents($url);
    $pos = stripos($contents, 'var ytInitialPlayerResponse = ');
    if ($pos !== FALSE) {
      $contents = substr($contents, $pos, strlen($contents));
      $endpos = stripos($contents, '</script>');
      $contents = substr($contents, 0, $endpos);
      $contents = trim($contents, ';</script>, var ytInitialPlayerResponse = ');
    }
    $data = json_decode($contents);
    dpm($data);
    $thumbnails = $data->videoDetails->thumbnail->thumbnails;
    $video['thumbnail'] = $thumbnails[array_key_last($thumbnails)]->url;
    $formats = $data->streamingData->formats;
    $video['url'] = $formats[array_key_last($formats)]->url;
    return $url;
}