<?php

/**
 * @file
 * Render an administrative menu as a dropdown menu at the top of the window.
 */

function dmge_system_cron() {
  dmge_system_make_patrons();
}
function dmge_system_make_patrons() {
  global $user;
  // User not logged in, bail out.
  if (empty($user->uid)) {
    return;
  }
  if (module_exists('patreon') && function_exists('patreon_fetch_user')) {
    $user_wrapper = entity_metadata_wrapper('user', $user);
    $role = user_role_load_by_name('patron');
    user_save($account, array('roles' => array_filter($account->roles, function($item) use ($role) {
      return $item != $role->name;
    })));
    $token = $user_wrapper->field_user_patreon_token->value();
    // This is not a patreon.  It's probably a Kickstarter backer.
    if (empty($token)) {
      return;
    }
    $patreon = patreon_fetch_user($token);
    if ($campaign = patreon_fetch_campaign_and_patrons(variable_get('patreon_access_token', NULL))) {
      $campaign = array_shift($campaign);
      $pledges = patreon_fetch_page_of_pledges($campaign['id'], 500);

      $patrons = Array();
      foreach ($pledges as $key => $value) {
        $patrons[$value['relationships']['patron']['data']['id']] = $value['attributes']['amount_cents'];
      }

      $pids = array_keys($patrons);

      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
        ->fieldCondition('field_user_patreon_id', 'value', $pids, 'IN')
        ->addMetaData('account', user_load(1));

      $result = $query->execute();
      if (isset($result['user'])) {
        $uids = array_keys($result['user']);
        $users = entity_load('user', $uids);
        foreach ($users as $uid => $user) {
          $role = user_role_load_by_name('patron');
          user_save($user, array('roles' => $user->roles + array($role->rid => $role->name)));
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function dmge_system_permission() {
  return array(
    'access dmge' => array(
      'title' => t('Access the DMGE'),
      'description' => t('Use the DMGE.'),
      'restrict access' => TRUE,
    ),
    'configure dmge' => array(
      'title' => t('Configure the DMGE'),
      'description' => t('Administrate the DMGE.'),
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * Themes the main system window.
 */
function dmge_system_theme() {
  global $user;
  return array(
    'dmge_system_main' => array(
      'variables' => array(
        'roles' => $user->roles,
      ),
      'template' => 'templates/dmge_system_main',
    ),
    'dmge_system_players' => array(
      'variables' => array(
      ),
      'template' => 'templates/dmge_system_players',
    ),
  );
}

function dmge_system_players() {
  global $user;
  $path = drupal_get_path('module', 'dmge_system');
  drupal_add_js($path . '/engine/player.js', array(
    'type' => 'file',
    'scope' => 'footer',
    'weight' => 999,
  ));
  $css_files = array(
    $path . '/css/players.css',
  );
  $ext_css_files = array(
    'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css',
    // 'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css'
  );
  foreach($ext_css_files as $ext_css_file) {
    drupal_add_css($ext_css_file, array(
      'type' => 'external',
      'weight' => 999,
    ));
  }
  foreach($css_files as $css_file) {
    drupal_add_css($css_file, array(
      'type' => 'file',
      'weight' => 999,
    ));
  }
  return theme('dmge_system_players', array());

}

function dmge_system_init() {
  // Set arbitrary setting.
  $data = array(
    'dmge_system' => array(),
  );
  drupal_add_js($data, 'setting');
}

function dmge_system_main() {
  global $user;
  if (!user_access('access dmge')) {
    return drupal_goto('user');
  }
  $path = drupal_get_path('module', 'dmge_system');

  $header_javascripts = array(
    $path . '/lib/honeycomb.min.js',
    $path . '/lib/jsgrid.min.js',
    $path . '/lib/fabric.min.js',
    $path . '/lib/js.cookie.js',
    $path . '/lib/svg.min.js',
  );
  foreach ($header_javascripts as $header_javascript) {
    drupal_add_js($header_javascript, array(
      'type' => 'file',
      'scope' => 'header',
      'weight' => 999,
    ));
  }
  drupal_add_js('https://code.jquery.com/ui/1.12.1/jquery-ui.min.js', array(
    'type' => 'external',
    'scope' => 'header',
    'weight' => 999,
  ));

  $footer_javascripts = array(
    $path . '/engine/init.js',
    $path . '/engine/dmge.js',
  );
  foreach ($footer_javascripts as $footer_javascript) {
    drupal_add_js($footer_javascript, array(
      'type' => 'file',
      'scope' => 'footer',
      'weight' => 999,
    ));
  }

  $css_files = array(
    $path . '/css/jsgrid.min.css',
    $path . '/css/jsgrid-theme.min.css',
    $path . '/css/jquery-ui.structure.min.css',
    $path . '/css/font-awesome-animation.min.css',
    $path . '/css/screen.css',
  );
  $ext_css_files = array(
    'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css',
    'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css'
  );
  foreach($ext_css_files as $ext_css_file) {
    drupal_add_css($ext_css_file, array(
      'type' => 'external',
      'weight' => 999,
    ));
  }
  foreach($css_files as $css_file) {
    drupal_add_css($css_file, array(
      'type' => 'file',
      'weight' => 999,
    ));
  }
  return theme('dmge_system_main', array('roles' => $user->roles));
}

/**
 * Implements hook_menu().
 */
function dmge_system_menu() {
  // Engine
  $items['engine'] = array(
    'title' => 'DMGE',
    'description' => 'The Dynamic Maps Game Engine.',
    'page callback' => 'dmge_system_main',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  // Player view
  $items['engine/players'] = array(
    'title' => 'DMGE Player View',
    'description' => 'The Dynamic Maps Game Engine.',
    'page callback' => 'dmge_system_players',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  // Module settings.
  $items['admin/config/administration/dmge_system'] = array(
    'title' => 'DMGE',
    'description' => 'Adjust DMGE settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dmge_system_theme_settings'),
    'access arguments' => array('configure dmge'),
  );
  $items['engine/youtube'] = array(
    'title' => 'Ajax callback for YouTube URLs.',
    'page callback' => '_dmge_system_get_youtube_url',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function dmge_system_theme_settings($form = array()) {
  $form['markup']['#markup'] = "I should do something with this.";
  return $form;
}

/**
 * In case we need a redirect in code.
 */
function dmge_system_engine($form = array()) {
  $form['markup']['#markup'] = "hello world";
  return $form;
}

/**
 * Returns true if link is a patreon link.
 */
function _dmge_is_patreon_link($url) {
  if (strpos($url, 'patreon') !== FALSE) {
    return TRUE;
  }
}

/**
 * Helper rewrites url for provider.
 */
function _dmge_rewrite_url($url) {
  if (_dmge_is_patreon_link($url)) {
    $url = parse_url($url);
    $matches = array();
    preg_match('/h=(\d+)/', $url['query'], $matches);
    if (!empty($matches)) {
      $url = 'https://www.patreon.com/posts/' . $matches[1];
    }
  }
  return $url;
}

function dmge_system_form_user_login_block_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}
function dmge_system_form_user_login_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}
function dmge_system_form_user_register_form_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}
function dmge_system_form_passwordless_login_alter(&$form, &$form_state) {
  _dmge_system_login_form_alter($form, $form_state);
}

function _dmge_system_login_form_alter(&$form, &$form_state = NULL) {
  if (module_exists('patreon_user')) {
    if (user_is_anonymous()) {
      if ($settings = (variable_get('patreon_user_registration', 0))) {
        $client_id = variable_get('patreon_client_id', NULL);
        $method = variable_get('patreon_user_registration_method', PATREON_USER_COPY_ACCOUNT);

        if ($url = patreon_authorise_account($client_id, patreon_user_get_callback_url(), FALSE)) {
          if ($method == PATREON_USER_COPY_ACCOUNT) {
            $title = t('Register via Patreon');
          }
          else {
            $title = t('Log on via Patreon');
          }
          $patreon_link = t('<a href="@url" id="user-login-patreon"><i class="fab fa-patreon">&nbsp;</i> @title</a>', array(
            '@url' => $url,
            '@title' => $title,
          ));
        }
      }
    }
  }
  $form['links']['#markup'] = '<div class="item-list"><ul><li class="first">' . $patreon_link . '</li><li class="last"><a href="/user/password" title="Request new password via e-mail." class="password-reset-link"><i class="fas fa-unlock-alt">&nbsp;</i> Request new password</a></li></ul></div>';
}

/**
 * Tried to alter values, but did it in the template instead (multifield didn't care about my alterations)
 */
function dmge_system_preprocess_field($vars) {
  switch ($vars['element']['#field_name']) {
    case 'field_resource_links':
    // $link = &$vars['element']['#items'][0]['field_resource_link'][LANGUAGE_NONE][0];
    // $link = &$vars['items'][0]['field_resource_link']['#items'][0];
    // if (strpos($link['url'], 'patreon') !== FALSE) {
    //   $url = parse_url($link['url']);
    //   $matches = array();
    //   preg_match('/h=(\d+)/', $url['query'], $matches);
    //   $link['display_url'] = 'https://www.patreon.com/posts/' . $matches[1];
    //   $link['url'] = $link['display_url'];
    // }
      break;

    default:
      // nothing
      break;
  }
}

/**
 * Alter search button.
 */
function dmge_system_form_library_resources_block_form_alter(&$form, $form_state) {
  $form['keys']['#attributes']['placeholder'][] = t('Search');
  $form['actions']['submit']['#value'] = html_entity_decode('&#xf002;');
}

/**
 * Implements hook_rest_server_execute_errors_alter().
 */
function dmge_system_rest_server_execute_errors_alter(&$error_alter_array, $controller, $arguments) {
  if ($error_alter_array['code'] === 401) {
    $error_alter_array['code'] = 400;
    // $error_alter_array['header_message'] = 'No love.';
    // $error_alter_array['body_data'] = 'Bad username or password.';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function dmge_system_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'dmge_system');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Helper to get YouTube URL.
 */
function _dmge_system_get_youtube_url($id = '') {
  $id = filter_xss($id);
  $id = check_plain($id);
  if (!empty($_GET)) {
    if (empty($_GET['v'])) {
      return 'This URL is used to process YouTube URLs<br>Raw access does not garner any benefits.';
    }
    $id = $_GET['v'];
  }
  if (empty($id)) {
    return 'No id provided.';
  }
  $opts = array(
  'http' => array(
    'method' => "GET",
    'user_agent' => 'Dynamic Maps Game Engine',
    'header' => "Accept-language: en\r\n"
    )
  );

  $context = stream_context_create($opts);
  $yt_url = 'https://www.youtube.com/get_video_info?video_id=' . $id . '&el=embedded&ps=default&eurl=&gl=US&hl=en';
  $dt = file_get_contents($yt_url, false, $context);

  if (strpos($dt, 'status=fail') !== false) {

    $x = explode("&", $dt);
    $t = array(); $g = array(); $h = array();

    foreach($x as $r){
      $c = explode("=", $r);
      $n = $c[0]; $v = $c[1];
      $y = urldecode($v);
      $t[$n] = $v;
    }

    $x = explode("&", $dt);
    foreach($x as $r) {
      $c = explode("=", $r);
      $n = $c[0]; $v = $c[1];
      $h[$n] = urldecode($v);
    }
    $g[] = $h;
    $g[0]['error'] = true;
    $g[0]['instagram'] = "mcdoolz";
    drupal_json_output($g);

  } else {

    $x = explode("&", $dt);
    $t = array(); $g = array(); $h = array();

    foreach($x as $r) {
        $c = explode("=", $r);
        $n = $c[0]; $v = $c[1];
        $y = urldecode($v);
        $t[$n] = $v;
    }
    $streams = explode(',', urldecode($t['url_encoded_fmt_stream_map']));
    foreach($streams as $dt) {
      $x = explode("&", $dt);
      foreach($x as $r){
        $c = explode("=", $r);
        $n = $c[0]; $v = $c[1];
        $h[$n] = urldecode($v);
      }
      $g[] = $h;
    }
    drupal_json_output($g);
  }
}

/**
 * Find a video with the respective video id.
 */
function _dmge_system_get_youtube_video($video) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'resource')
    ->fieldCondition('field_resource_links', 'field_resource_link', $video, 'IN')
    ->range(0, 10)
    ->addMetaData('account', user_load(1));

  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
  }
  // There should only ever be one, unless someone manually added more than one.
  return $nodes[0];
}

/**
 * Helper gets videos from youtube channel id.
 * Manny Sykes is hardcoded.
 */
function dmge_system_get_youtube_channel($channel = 'UCrsCjHT8tJ1vpSkvLoYji3g') {
  $apikey = 'AIzaSyBiUK8xJG-Q8hUwxekpuf1R_xhYYWKuwL0';
  $maxResults = 200;

  $videos = json_decode(file_get_contents('https://www.googleapis.com/youtube/v3/search?order=date&part=snippet&channelId='.$channel.'&maxResults='.$maxResults.'&key='.$apikey.''));

  foreach($videos->items as $item) {
    if (isset($item->id->videoId)) {
      if (true) {}
      $node = new stdClass();
      $node->title = $item->snippet->title;
      $url = 'https://www.youtube.com/?v='.$item->id->videoId;
    }
  }
}
